#ifndef ESMACAT_APPLICATION_H
#define ESMACAT_APPLICATION_H

//// standard library
#include <vector>
#include <typeinfo>

// esmacat library
#include "esmacat_server.h"
#include "esmacat_slave.h"
//#include "esmacat_multifunction.h"
#include "esmacat_motordriver.h"
#include "esmacat_loadcell_interf.h"
#include "esmacat_analog_input.h"
#include "esmacat_sea_driver.h"

class esmacat_server;   // forward declared dependencies. needed for co-dependency
class esmacat_sea_driver;
class esmacat_motor_driver;

class esmacat_application
{
private:
    esmacat_server* ecat_server;    // esmacat server, EtherCAT threads are running here
protected:
    esmacat_err assign_esmacat_slave_index(esmacat_analog_input*& slave_in_app, int slave_index);       // connect an object that you declared with an object autogenerated from actual esmacat slaves
    esmacat_err assign_esmacat_slave_index(esmacat_motor_driver*& slave_in_app, int slave_index);       // connect an object that you declared with an object autogenerated from actual esmacat slaves
    esmacat_err assign_esmacat_slave_index(esmacat_sea_driver*& slave_in_app, int slave_index);       // connect an object that you declared with an object autogenerated from actual esmacat slaves
    esmacat_err assign_esmacat_slave_index(esmacat_loadcell_interface*& slave_in_app, int slave_index); // connect an object that you declared with an object autogenerated from actual esmacat slaves
//    template <typename T> T assign_esmacat_slave_index (T *& slave_in_app, int slave_index); // let's use template in future, for more elegant programmings
    double elapsed_time_ms;
public:
    esmacat_application();                  // constructor
    bool is_esmacat_server_closed();        // is esmacat server closed ?
    void stop();    // stop hThread
    virtual void loop() = 0;  // loop function, this needs to be overrode by a child class
    virtual void setup() = 0;                   // setup function, this needs to be overrode by a child class
    virtual void connect() = 0;                    // init function, the user objects will be connected with actual slave objects, this needs to be overrode by a child class
    void start();                               // start and application
    void set_ethercat_adapter_name(char* eth_adapter_name); // if you already know the name of ethernet adapter to use for ethercat, then directly use this function
    void set_ethercat_adapter_name_through_terminal();      // if you already want to select in a terminal, then select this function
    void set_elapsed_time_ms(double elapsed_time_ms_);
};

#endif // ESMACAT_APPLICATION_H
